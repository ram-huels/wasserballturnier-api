/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package wasserballturnier.api.generated.api;


import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;
import wasserballturnier.api.generated.model.GruppePushTO;
import wasserballturnier.api.generated.model.GruppenArrayTO;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Validated
public interface GruppeApi {

    @Operation(summary = "Autogeneriert Gruppen", description = "Generiert alle Gruppen automatisch", tags={ "Gruppen" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Es wurden alle Gruppen generiert") })
    @RequestMapping(value = "/gruppe/automatic/{gruppenGroesse}",
        method = RequestMethod.PUT)
    ResponseEntity<Void> gruppenAutomatic(@Parameter(in = ParameterIn.PATH, description = "Groesse der Gruppen bei der Generation", required=true, schema=@Schema()) @PathVariable("gruppenGroesse") Integer gruppenGroesse);


    @Operation(summary = "Gibt alle Gruppen zur端ck", description = "Gibt alle Gruppen zur端ck", tags={ "Gruppen" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Es werden alle Gruppen zur端ckgegeben", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GruppenArrayTO.class))) })
    @RequestMapping(value = "/gruppe",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<GruppenArrayTO> gruppenPost();


    @Operation(summary = "Speichert eine Gruppe", description = "Wenn eine ID im Request-Body gesetzt ist, dann wird eine bestehende Gruppe aktualisiert; ansonsten wird eine neue Gruppe erstellt", tags={ "Gruppen" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Die Gruppe wurde erfolgreich gespeichert"),
        
        @ApiResponse(responseCode = "400", description = "Ein Feld oder mehrere Felder sind ung端ltig"),
        
        @ApiResponse(responseCode = "404", description = "Die im Request-Body angegebene ID konnte keiner Gruppe zugeordnet werden") })
    @RequestMapping(value = "/gruppe",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> gruppenPut(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody GruppePushTO body);

}

